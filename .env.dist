# The ID of the OpenAI language model engine to be used
OPENAI_ENGINE_ID="text-davinci-003"

# The name of the OpenAI language model to be used
OPENAI_MODEL="text-davinci-003"

# Your organization's API ID for OpenAI
# https://platform.openai.com/account/org-settings
OPENAI_API_ORG_ID="org-euRh4hyXOmAEh9QagXatalSU"

# The version of Node.js to be used
USE_NODE_VERSION="16.20.0"

# Domain of server for SSL certificate, e.g. example.com
#
# IMPORTANT!: MUST be valid public FQDN (Fully Qualified Domain Name)
# IMPORTANT!: Domain MUST be registered and have valid nameservers assigned
SERVER_HOST="localhost"

# The port number on which the server will run
SERVER_PORT=3033

# Wildcard domain of server for SSL certificate, e.g. *.example.com
#
# IMPORTANT!: MUST start from comma if not empty as value is concatenated with
# $SERVER_HOST in docker-compose.yml
WILDCARD_DOMAIN=",*.yourlivedomain.com"
# IMPORTANT!: MUST start from comma if not empty
WILDCARD_DOMAIN="localhost"

# Define username for basic authorization at `/get-jwt` endpoint
AUTH_USER=testuser

# Define password for basic authorization at `/get-jwt` endpoint
AUTH_PASS=testuser123

# The root URL for the OpenAI API
# https://api.openai.com/[v1]
OPENAI_API_ROOT="/v1"

# Set to `yes` to enable deployment upon Docker build
SERVERLESS=no

# Whether to use an in-memory SQLite database
SQLITE_MEMORY_DB=no

# The name of the SQLite database file
SQLITE_DB="soakp_secrets.sqlite"

# The name of the table to store persistent data in SQLite
SQLITE_TABLE=tokens

# The directory to store data files
DATA_FILE_DIR="/usr/local/var/soakp"

# The name of the data file
DATA_FILE_NAME=secrets.db

# The secret key for JWT token generation
JWT_SECRET=jQQJjmb0BP2Q8033

# The name of the SSL private key file
# generated by myca or certbot service
# Must have format [hostname]-key.pem
SSL_KEY_FILE="localhost-key.pem"

# Provide the name of the SSL certificate file which was
# generated by myca or certbot service
# Must have format [hostname]-crt.pem
SSL_CERT_FILE="localhost-crt.pem"

# The path to the directory containing SSL certificate
SSL_CERT_DIR="/usr/local/etc/soakp"

# The length of the private key for SSL certificate generation
MYCA_KEY_LEN=4096

# The validity period (in days) for the SSL certificate
# 4 years + 1 day
MYCA_CERT_DAYS=1461

# The passphrase for the private key
MYCA_KEY_PASS=hbQUKRvvT0rQD6M38NT9NtYm

# The common name for the certificate authority. Any string
MYCA_ORG_CN="RootCA Org Ltd."

# The directory to store SSL certificates
SSL_CERTS_DIR="/usr/local/etc/soakp"

# The timezone for the server
TIMEZONE=Etc/UTC

# The UID (user ID) for the host user
HOST_USER_UID=1001

# The GID (group ID) of the host user. It will be assigned to the container
# user to avoid permission clash for mounted folders.
HOST_USER_GID=1000

# The user name of the host user. It will be assigned to the container
# user to avoid permission clash for mounted volumes.
HOST_USER_NAME=dev

# The password for the user account
HOST_USER_PASS=76gEtFpOPTALBsdx

# The version of Certbot
CB_VERSION="2.6.0"

# Certbot options to agree to the Terms of Service
# User email can be any valid email
CB_AGREE_TOS="--agree-tos --email=admin@example.com"

# Certbot option for a dry run
CB_DRY_RUN="--dry-run"

# The DNS provider for Certbot DNS challenges
#
# Possible values: route53, ovh, cloudflare, digitalocean, google, rfc2136, dnsimple, linode, dnsmadeeasy, nsone, luadns, sakuracloud, cloudxns, gehirn
CB_DNS=route53

# The AWS access key ID
AWS_ACCESS_KEY_ID=AWSKEYID

# The AWS secret access key
AWS_SECRET_ACCESS_KEY=AWSKey

# The Linode API token for Certbot DNS challenges
LINODE_CREDENTIALS_FILE=

# The DigitalOcean API token for Certbot DNS challenges
DNS_DIGITALOCEAN_TOKEN=

# Whether to enable debugging mode
DEBUG=yes

# The environment mode for Node.js
NODE_ENV=development

# Whether to reset SQLite database on startup
SQLITE_RESET=no
